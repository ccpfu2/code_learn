#!/bin/python3

import math
import os
import random
import re
import sys

#
# Complete the 'solve' function below.
#
# The function is expected to return a STRING.
# The function accepts following parameters:
#  1. LONG_INTEGER k
#  2. LONG_INTEGER n
#

# pre-build the lists of power will need in the problem
#   n <= 10**16 -> 16/log(2) < 54
#   build target [[1**1%100, 1**2%100, ..., 1**(2**54)%100], ... [9**1%100, 9**2%100, ..., 9**(2**54)%100]]


# TODO: Do this question with different methods.
pow_list = [
                [2, 4, 16, 56, 36, 96, 16, 56, 36, 96, 16, 56, 36, 96, 16, 56, 36, 96, 16, 56, 36, 96, 16, 56, 36, 96, 16, 56, 36, 96, 16, 56, 36, 96, 16, 56, 36, 96, 16, 56, 36, 96, 16, 56, 36, 96, 16, 56, 36, 96, 16, 56, 36, 96, 16],
                [3, 9, 81, 61, 21, 41, 81, 61, 21, 41, 81, 61, 21, 41, 81, 61, 21, 41, 81, 61, 21, 41, 81, 61, 21, 41, 81, 61, 21, 41, 81, 61, 21, 41, 81, 61, 21, 41, 81, 61, 21, 41, 81, 61, 21, 41, 81, 61, 21, 41, 81, 61, 21, 41, 81],
                [4, 16, 56, 36, 96, 16, 56, 36, 96, 16, 56, 36, 96, 16, 56, 36, 96, 16, 56, 36, 96, 16, 56, 36, 96, 16, 56, 36, 96, 16, 56, 36, 96, 16, 56, 36, 96, 16, 56, 36, 96, 16, 56, 36, 96, 16, 56, 36, 96, 16, 56, 36, 96, 16, 56],
                [5, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25],
                [6, 36, 96, 16, 56, 36, 96, 16, 56, 36, 96, 16, 56, 36, 96, 16, 56, 36, 96, 16, 56, 36, 96, 16, 56, 36, 96, 16, 56, 36, 96, 16, 56, 36, 96, 16, 56, 36, 96, 16, 56, 36, 96, 16, 56, 36, 96, 16, 56, 36, 96, 16, 56, 36, 96],
                [7, 49, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                [8, 64, 96, 16, 56, 36, 96, 16, 56, 36, 96, 16, 56, 36, 96, 16, 56, 36, 96, 16, 56, 36, 96, 16, 56, 36, 96, 16, 56, 36, 96, 16, 56, 36, 96, 16, 56, 36, 96, 16, 56, 36, 96, 16, 56, 36, 96, 16, 56, 36, 96, 16, 56, 36, 96],
                [9, 81, 61, 21, 41, 81, 61, 21, 41, 81, 61, 21, 41, 81, 61, 21, 41, 81, 61, 21, 41, 81, 61, 21, 41, 81, 61, 21, 41, 81, 61, 21, 41, 81, 61, 21, 41, 81, 61, 21, 41, 81, 61, 21, 41, 81, 61, 21, 41, 81, 61, 21, 41, 81, 61],
            ]

def pow_100(b,n):
    if b == 0:
        return 0
    elif b == 1:
        return 1
    else:
        rtn = 1
        for i in range(54):
            if n > 0:
                if n % 2 == 1:
                    rtn *= pow_list[b-2][i]
                    rtn = rtn%100
                n = n>>1
            else:
                break
        # print(f'pow_100({b},{n}) = {rtn}')
        return rtn

def solve(k, n):
    # Write your code here
    # Idea:
    # T(c) = c**n 
    # let c = a * 10 + b
    # (c**n)%100 = 10*n*a*(b**(n-1)) + b**n = 10*(n % 10)*(a % 10)*(b**(n-1)) + b**n
    na_20 = (k//10)%20
    na_100 = (k//10)%100
    p = ((na_20 * (na_20 + 1))>>1)%10
    q = ((na_20 * (na_20 - 1))>>1)%10
    # print(f'p,q = {p},{q}')
    lb = k % 10
    n_10 = n % 10

    result = 0
    for b in range(10):
        b_n_1 = pow_100(b,n-1)
        if b <= lb:
            # print(f'{b}: {temp}')
            result += 10 * n_10 * p * b_n_1 + (na_100+1) * b_n_1 * (b % 10)
            result = result%100
        elif k>=10:
            # print(f'{b}: {temp}')
            result += 10 * n_10 * q * b_n_1 + (na_100+1) * b_n_1 * (b % 10)
            result = result%100
    
    if result<10:
        return f'0{result}'
    else:
        return str(result)

if __name__ == '__main__':

    t = int(input().strip())

    for t_itr in range(t):
        first_multiple_input = input().rstrip().split()

        k = int(first_multiple_input[0])

        n = int(first_multiple_input[1])

        result = solve(k, n)

        print(result + '\n')

